// webppl quantifier-equivalence.wppl --require utils

// quantifierEquivalence goes from a representation of objects with properties
// to a representation of the relations between the properties
// (spec., the truth-value of possible quantifier utterances)
// this is useful preprocessing for models that do inference over states (e.g. RSA) 
// where the identity of the objects doesn't matter, since the state space (that goes into RSA)
// doesn't depend upon the number of objects (but is fixed to space of sentences)

// logic
var A_is_B = function(obj){
  return (obj[0] && obj[1])
}

var not_A = function(obj){
  return !(obj[0])
}

var is_an_A_B_C = function(objs){
  return all(function(k){
    return any(function(x){return x}, objs[k])
  },_.keys(objs))
}

var all_A_are_B = function(a, b){
  return all(function(x){return (not_A(x) || A_is_B(x))}, _.zip(a,b))
}

var some_A_are_B = function(a, b){
  return any(A_is_B, _.zip(a,b)) && any(function(x){return x}, a)
}

var meaning = function(quantifier){
  return quantifier=="all"? all_A_are_B :
         quantifier=="some"? some_A_are_B :
         quantifier=="none"? function(a,b){return !(some_A_are_B(a,b))} :
         quantifier=="not all"? function(a,b){return !(all_A_are_B(a,b))} : 
         true
}

var utterances = ["all","some","not all","none"]
var properties =  ["A","B","C"]

var propertyOrders = _.flatten(
  map(function(p){
    var props = ["A","B","C"]
    props.splice(props.indexOf(p), 1)
    return map(function(x){return [x,p]}, props)
  }, properties), 
true)

var isPremise = function(terms){
  return !((terms[0]=='C') && (terms[1]=='A') || (terms[0]=='A') && (terms[1]=='C'))
}

// utterances are a quantifier relation, and two properties (e.g. some As are Bs)
var utterancesAboutProperties = _.flatten(map(function(q){
  return map(function(o){
    return {
      quantifier:q, 
      terms:o,
      type: isPremise(o) ? 'premise' : 'conclusion'
          }
  }, propertyOrders)
}, utterances), true)

var quantifierEquivalence = cache(function(opts){
  Enumerate(function(){

    var n_objects = opts["n_objects"]
    var base_rate = opts["base_rate"]
    // objects, lists of properties: order corresponds to object id
    var objects = {
      A: repeat(n_objects, function(x){return flip(base_rate)}),
      B: repeat(n_objects, function(x){return flip(base_rate)}),
      C: repeat(n_objects, function(x){return flip(base_rate)})
    }

    // optionally, condition on there being each property present in at least one object
    factor(is_an_A_B_C(objects) ? 0 : -Infinity)

    // for each possible utterance -- property pairing
    // compute truth value; return only true ones
   return filter(function(utt){
          var q = utt["quantifier"]
          var props = utt["terms"]
          return meaning(q)(objects[props[0]], objects[props[1]])
        },utterancesAboutProperties)
  })
})
