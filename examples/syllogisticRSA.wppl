// webppl syllogisticRSA.wppl --require utils

// syllogistic space 

var possiblePremises = subset(utterancesAboutProperties, "type", "premise")

var premiseForms = {"1":[["B","A"],["C","B"]],
                  "2":[["A","B"],["C","B"]],
                  "3":[["B","A"],["B","C"]],
                  "4":[["A","B"],["B","C"]]}

var scholasticDict = _.invert({"all":"A","none":"E","some":"I","not all":"O"})


var scholasticCodeToPremises = function(code){
  var p = premiseForms[code[2]]
  var premise1 = {quantifier: scholasticDict[code[0]],
                  terms: p[0],
                  type:'premise'}
  var premise2 = {quantifier: scholasticDict[code[1]],
                  terms: p[1],
                  type:"premise"}
  return [premise1, premise2]
}

var literalReasoner = cache(function(prior, premises) {
  Enumerate(function(){
    var equivalenceState = sample(prior)
    var truePremises = subset(equivalenceState, "type", "premise")

    condition(all(function(x){
            return utils.containsObject(x, truePremises)
              }, premises))

    var trueConclusions = subset(equivalenceState, "type", "conclusion")
    var conclusion = uniformDraw(trueConclusions)

    return conclusion
  })
})

var experimenter = cache(function(prior, conclusion) {
  Enumerate(function(){
    var premise1 = {
      quantifier: uniformDraw(utterances),
      terms: uniformDraw([["B","A"],["A","B"]]),
      type: 'premise'
    }
    var premise2 = {
      quantifier: uniformDraw(utterances),
      terms: uniformDraw([["B","C"],["C","B"]]),
      type: 'premise'
    }
    var premises = [premise1, premise2]

    var R0 = literalReasoner(prior, premises)

    factor(R0.score([],conclusion))
    
    return premises
  })
})

var pragmaticReasoner = function(prior, premises, lambda) {
  Enumerate(function(){
    var equivalenceState = sample(prior)

    var trueConclusions = subset(equivalenceState, "type", "conclusion")
    var conclusion = uniformDraw(trueConclusions)

    var E1 = experimenter(prior, conclusion)

    factor(lambda*E1.score([],premises))

    return conclusion["quantifier"]+"_"+conclusion["terms"]
  })
}


var premises = [ 
  { quantifier: 'all', terms: [ 'B', 'A' ], type: 'premise' },
  { quantifier: 'all', terms: [ 'C', 'B' ], type: 'premise' } 
  ]

var priorERP = quantifierEquivalence({n_objects: 4, base_rate: 0.25})

pragmaticReasoner(priorERP, premises, 2)

